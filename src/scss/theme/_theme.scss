/*
---------------------------
responsive utilities
---------------------------
*/

// MEDIA QUERIES //
$breakpoints: (
    'not-large': 'max-width: 1023px',
    'small': 'max-width: 767px',
    'from-medium': 'min-width: 768px',
    'medium': 'min-width: 768px) and (max-width: 1023px',
    'from-large': 'min-width: 1024px'
);

@mixin screen($breakpoint) {
    $rule: map-get($breakpoints, $breakpoint);
    @media screen and ($rule) {
        @content;
    }
}

// RESPONSIVE MODIFIER //
// /!\ requis : il faut que les règles 'tous devices' soient déclarés séparément avant.
// avec le regroupement auto des media-queries via postCSS
// l'ordre des declarartion est bon

@mixin responsive-modifier($context, $modifier, $bps) {
    @each $key in $bps {
        @if $key == 'all' { // pour toutes
            .#{$context}.#{$modifier} {
                @content;
            }
        } @else {
            .#{$context}.#{$modifier}-#{$key} {
                @include screen($key) {
                    @content;
                }
            }
        }
    }
}

/*
---------------------------
all colors
---------------------------
*/

$gris-4: #f1f5f8;
$gris-6: #e9edf0;
$gris-7: #e4e6e9;
$gris-11: #8b9299;
$gris-16: #16212c;
$header: #153853;
$bleu-sombre: #003366;
$liens: #129af0;
$liens-hover-sombre: darken($liens, 30);
$liens-hover: #00b7ff;
$bleu-clair: lighten($liens, 30);
$alerte: #d50304;
$alerte-bg: #ffd7d7;
$valide: #6faa12;
$valide-bg: #dff0d8;
$blanc: #ffffff;
$prix: #ff6e17;
$alpha_sombre: rgba(0, 0, 0, 0.5);

/*
---------------------------
backgrounds
---------------------------
*/

$backgrounds: (
    erreur: $alerte-bg,
    valide: $valide-bg,
    notif: $bleu-clair,
    active: $liens,
    active_hover: $liens-hover,
    gris: $gris-4,
    gris_sombre: $gris-7,
    sombre: $gris-16,
    colore_sombre: $bleu-sombre,
    header: $header,
    clair: $blanc,
    alpha_sombre: $alpha_sombre
);

@mixin background($bgcolor) {
    background-color: map-get($backgrounds, $bgcolor);
}

/*
---------------------------
borders
---------------------------
*/

$border-widths: (
    std: 1px,
    large: 3px
);

$border-width: map-get($border-widths, std);
$border-width-large: map-get($border-widths, large);

$border-colors: (
    std: $gris-7,
    std_sombre: #d2d6db,
    texte: $gris-16,
    sombre: $bleu-sombre,
    erreur: $alerte,
    valide: $valide,
    action: #0386C3,
    action_hover: $liens,
    alpha_clair: rgba(255, 255, 255, .2)
);

@mixin border($color: std, $cardinal: "", $width: std){

    $color: map-get($border-colors, $color);
    $width: map-get($border-widths, $width);
    $cardinal: if($cardinal == "", "", #{"-"}#{$cardinal});

    border#{$cardinal}: solid $width $color;
}

%border-double {
    @include border($cardinal: top);
    @include border($cardinal: bottom);
}

/*
---------------------------
borders radius
---------------------------
*/

$border-radius-std: 3px;

%border-radius-std { border-radius: $border-radius-std; }
%border-radius-s { border-radius: 2px; }
%cercle { border-radius: 50%; }

@mixin borderRadius($position:top, $radius:$border-radius-std ) {
    @if $position == top {
        border-radius: $radius $radius 0 0;
    } @else if $position == bottom {
        border-radius:  0 0 $radius $radius;
    } @else if $position == left {
        border-radius:  $radius 0 0 $radius;
    } @else if $position == right {
        border-radius: $radius 0 0 $radius;
    }
}

/*
---------------------------
animations
---------------------------
*/

%transition { transition: all .1s ease; }

@keyframes rotation {
  to { transform: rotate(360deg); }
}

/*
---------------------------
icons
---------------------------
*/

%icon {
    &:before {
        font-size: 20px;
        vertical-align: middle;
        font-family: 'Espace-client';
        speak: none;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1em;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
}

@mixin icon {
    @extend %icon;
}

%icontexte {
    font-weight: bold;
    font-family: georgia, serif;
    font-style: italic;
}

/*
---------------------------
typo
---------------------------
*/

/** commun ***/
@font-face {
    font-family: 'TheAntiqua';
    src: url('../fonts/theantiquab-w6semibold-webfont.woff') format('woff'),
        url('../fonts/theantiquab-w6semibold-webfont.woff2') format('woff2'),
        url('../fonts/theantiquab-w6semibold-webfont.svg#TheAntiqua') format('svg');
    font-style: normal;
    font-weight: normal;
}

$config-font-size: (
    t1: (
        'from-large': 42px,
        'medium': 36px,
        'small': 32px
    ),
    t2: (
        'from-large': 34px,
        'medium': 32px,
        'small': 28px
    ),
    t3: (
        'from-large': 32px,
        'medium': 30px,
        'small': 26px
    ),
    t4: (
        'from-medium': 28px,
        'small': 24px
    ),
    t5: (
        'from-medium': 24px,
        'small': 22px
    ),
    t6: 22px,
    t7: 20px,
    m: 16px,
    std: 14px,
    s: 13px,
    xs: 11px
);


@mixin fontsize($variante) {
    $item: map-get($config-font-size, $variante);

    @if type-of($item) == map {
        @each $device, $fs in $item {
            @include screen ($device) {
                font-size: $fs;
            }
        }
    } @elseif type-of($item) == number {
        font-size: $item;
    } @else {
        @debug ("erreur : mixin font-size => type-of($item) : " + type-of($item));
    }
}

/* text colors */
%color-erreur { color: $alerte; }
%color-valide { color: $valide; }

%color-active { color: $liens-hover; }
%color-active-sombre { color: $liens-hover-sombre; }

%color-liens { color: $liens; }
%color-liens-hover { color: $liens-hover; }

%color-gris { color: $gris-11; }
%color-std { color: $gris-16; }
%color-clair { color: $gris-7; }
%color-negatif { color: $blanc; }

%color-liens-sombres { color: $bleu-sombre; }
%color-liens-sombres-hover { color: $liens; }

%color-prix { color: $prix; }

$font-colors: (
    std: $gris-16,
    gris: $gris-11,
    negatif: $blanc,
    prix: $prix,
    erreur: $alerte,
    valide: $valide,
    active: $liens-hover,
    active_sombre: $liens-hover-sombre
);

@mixin color($color) {
    color: map-get($font-colors, $color);
};


/* line-height */
%line-height-xl { line-height: 400%; }
%line-height-std { line-height: 140%; }
%line-height-s { line-height: 100%; }

// font-famillies
$antiqua: 'TheAntiqua', georgia, serif;

%sans-serif { font-family: helvetica, sans-serif; }
%serif { font-family: $antiqua; }

/*
-------------------------------
margin & padding utilities
-------------------------------
*/

$padding-increment: 7px;

$pas: (
    's': $padding-increment,
    'm': $padding-increment * 2,
    'l': $padding-increment * 4,
    'xl': $padding-increment * 7,
    'xxl': $padding-increment * 10
);

@function pas($size) {
    @return map-get($pas, $size)
}

// pour le layout
$goutiere: pas(m);
$goutiere-large: pas(l);


$arrow-size: 10px;

//faire des fleches (tooltips, sous-menus)
@mixin bloc-fleche(

    $borderColor: $gris-6,
    $backgroundColor: $blanc,
    $position: 'left',
    $size: $arrow-size ) {

    &::before,
    &::after {
        content: "";
        display: block;
        position: absolute;

        @if $position == 'left' {
            border-top: $size solid transparent;
            border-bottom: $size solid transparent;
            left: -$size;
            top: $size * 2;

        } @else if $position == 'bottom' {

            border-left: $size solid transparent;
            border-right: $size solid transparent;
            bottom: -$size;
            left: $size * 2;

        } @else if $position == 'top' {

            border-right: $size solid transparent;
            border-left: $size solid transparent;
            top: (-$size) + 1px;
            left: $size * 5;
        }
    }

    &::before {
        @if $position == 'left' {
            border-right: ($size -$border-width) solid $borderColor;
        } @else if $position == 'bottom' {
            border-top: ($size -$border-width) solid $borderColor;
        } @else if $position == 'top' {
            border-bottom: ($size -$border-width) solid $borderColor;
        }
    }

    &::after {
        z-index: 1;

        @if $position == 'left' {
            margin-left: $border-width;
            border-right: ($size -$border-width) solid $backgroundColor ;
        } @else if $position == 'bottom' {
            margin-bottom: $border-width;
            border-top: ($size -$border-width) solid $backgroundColor ;
        } @else if $position == 'top' {
            margin-top: $border-width;
            border-bottom: ($size -$border-width) solid $backgroundColor ;
        }
    }
}
